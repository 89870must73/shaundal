#!/bin/bash
blanco='\033[38;5;231m'
amarillo='\033[38;5;228m'
azul='\033[38;5;14m'
morado='\033[38;5;147m'
rojo='\033[0;31m'
verde='\033[38;5;148m'
yellow='\033[0;33m'
rosa='\033[38;5;213m'
melon='\033[38;5;208m'
guinda='\033[38;5;161m'
cierre='\033[0m'
bar1="\e[1;30m◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚◚\e[0m"
bar2="\033[38;5;183m--------------------------------------------------------------------\033[0m"
# Decrypt pa more
# %d/%m/:%S

clear
cd ~
export DEBIAN_FRONTEND=noninteractive

function ip_address(){
  local IP="$( ip addr | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -Ev "^192\.168|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[0-2]\.|^10\.|^127\.|^255\.|^0\." | head -n 1 )"
  [ -z "${IP}" ] && IP="$(curl -4s ipv4.icanhazip.com)"
  [ -z "${IP}" ] && IP="$(curl -4s ipinfo.io/ip)"
  [ ! -z "${IP}" ] && echo "${IP}" || echo 'ipaddress'
}

function BONV-MSG(){
 echo -e "\e[38;5;192m (by dankelthaher)\e[0m\e[38;5;121m Bonveio Debian VPS Installer\e[0m"
 echo -e " v20201107 testing"
 echo -e ""
}

function InsEssentials(){
apt update 2>/dev/null
apt upgrade -y 2>/dev/null
printf "%b\n" "\e[32m[\e[0mInfo\e[32m]\e[0m\e[97m Por Favor Espere..\e[0m"
apt autoremove --fix-missing -y > /dev/null 2>&1
apt remove --purge apache* ufw -y > /dev/null 2>&1

apt install nano wget curl zip unzip tar gzip p7zip-full bc rc openssl cron net-tools dnsutils dos2unix screen bzip2 ccrypt lsof -y 2>/dev/null

if [[ "$(command -v firewall-cmd)" ]]; then
 apt remove --purge firewalld -y
 apt autoremove -y -f
fi

apt install iptables-persistent -y -f
systemctl restart netfilter-persistent &>/dev/null
systemctl enable netfilter-persistent &>/dev/null

if [[ "$(grep -Ec '10\s\((B|b)uster\)' /etc/os-release)" -ge 1 ]]; then
 apt install tuned -y 2>/dev/null
 systemctl enable tuned &>/dev/null
 systemctl restart tuned &>/dev/null
 tuned-adm profile throughput-performance 2>/dev/null
fi

apt install dropbear stunnel4 privoxy ca-certificates nginx ruby apt-transport-https lsb-release squid jq tcpdump dsniff grepcidr screenfetch -y 2>/dev/null

apt install perl libnet-ssleay-perl libauthen-pam-perl libpam-runtime libio-pty-perl apt-show-versions python dbus libxml-parser-perl shared-mime-info -y 2>/dev/null

gem install lolcat 2>/dev/null
apt autoremove --fix-missing -y &>/dev/null

rm -rf /etc/apt/sources.list.d/openvpn*
echo "deb http://build.openvpn.net/debian/openvpn/stable $(lsb_release -sc) main" > /etc/apt/sources.list.d/openvpn.list
apt-key del E158C569 &> /dev/null
 # Installing OpenVPN by pulling its repository inside sources.list file 
 #rm -rf /etc/apt/sources.list.d/openvpn*
 echo "deb http://build.openvpn.net/debian/openvpn/stable $(lsb_release -sc) main" >/etc/apt/sources.list.d/openvpn.list && apt-key del E158C569 && wget -O - https://swupdate.openvpn.net/repos/repo-public.gpg | apt-key add -
 wget -qO security-openvpn-net.asc "https://keys.openpgp.org/vks/v1/by-fingerprint/F554A3687412CFFEBDEFE0A312F5F7B42F2B01E7" && gpg --import security-openvpn-net.asc
 apt-get update -y
 apt-get install openvpn -y
wget -qO - https://raw.githubusercontent.com/89870must73/REPO/main/openvpn-repo.gpg | apt-key add -

apt update 2>/dev/null
apt install openvpn git build-essential libssl-dev libnss3-dev cmake -y 2>/dev/null
apt autoremove --fix-missing -y &>/dev/null
apt clean 2>/dev/null

if [[ "$(command -v squid)" ]]; then
 if [[ "$(squid -v | grep -Ec '(V|v)ersion\s3.5.23')" -lt 1 ]]; then
  apt remove --purge squid -y -f 2>/dev/null
  wget "http://security.debian.org/debian-security/pool/updates/main/s/squid3/squid_3.5.23-5+deb9u5_amd64.deb" -qO squid.deb
  dpkg -i squid.deb
  rm -f squid.deb
 else
 echo -e "$bar1"
  echo -e "Squid v3.5.23 ya instalado"
  echo -e "$bar1"
 fi
else
 apt install libecap3 squid-common squid-langpack -y -f 2>/dev/null
 wget "http://security.debian.org/debian-security/pool/updates/main/s/squid3/squid_3.5.23-5+deb9u5_amd64.deb" -qO squid.deb
 dpkg -i squid.deb
 rm -f squid.deb
fi

## Running FFSend installation in background
rm -rf {/usr/bin/ffsend,/usr/local/bin/ffsend}
clear
echo -e "$bar1"
printf "%b\n" "\e[32m[\e[0mInfo\e[32m]\e[0m\e[97m ejecutando la instalación de FFSend en segundo plano\e[0m"
echo -e "$bar1"
screen -S ffsendinstall -dm bash -c "curl -4skL "https://raw.githubusercontent.com/89870must73/REPO/main/ffsend-v0.2.65-linux-x64-static" -o /usr/bin/ffsend && chmod a+x /usr/bin/ffsend"
hostnamectl set-hostname localhost &> /dev/null
clear
echo -e "$bar1"
printf "%b\n" "\e[32m[\e[0mInfo\e[32m]\e[0m\e[97m ejecutando la instalación de desinflado DDoS en segundo plano\e[0m"
echo -e "$bar1"
cat <<'ddosEOF'> /tmp/install-ddos.bash
#!/bin/bash
if [[ -e /etc/ddos ]]; then
 printf "%s\n" "DDoS-desinflar ya instalado" && exit 1
else
 curl -4skL "https://github.com/jgmdev/ddos-deflate/archive/master.zip" -o ddos.zip
 unzip -qq ddos.zip
 rm -rf ddos.zip
 cd ddos-deflate-master
 ./install.sh &> /dev/null
 cd .. && rm -rf ddos-deflate-master
 systemctl start ddos &> /dev/null
 systemctl enable ddos &> /dev/null
fi
ddosEOF
screen -S ddosinstall -dm bash -c "bash /tmp/install-ddos.bash && rm -f /tmp/install-ddos.bash"

clear
echo -e "$bar1"
printf "%b\n" "\e[32m[\e[0mInfo\e[32m]\e[0m\e[97m ejecutando la configuración de Iptables en segundo plano\e[0m"
echo -e "$bar1"
cat <<'iptEOF'> /tmp/iptables-config.bash
#!/bin/bash
IPADDR="$(curl -4sk http://ipinfo.io/ip)"
PNET="$(ip -4 route ls | grep default | grep -Po '(?<=dev )(\S+)' | head -1)"
CIDR="172.29.0.0/16"
iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT
iptables -t nat -F
iptables -t mangle -F
iptables -F
iptables -X
iptables -A INPUT -s $IPADDR -p tcp -m multiport --dport 1:65535 -j ACCEPT
iptables -A INPUT -s $IPADDR -p udp -m multiport --dport 1:65535 -j ACCEPT
iptables -A INPUT -p tcp --dport 25 -j REJECT   
iptables -A FORWARD -p tcp --dport 25 -j REJECT
iptables -A OUTPUT -p tcp --dport 25 -j REJECT
iptables -I FORWARD -s $CIDR -j ACCEPT
iptables -t nat -A POSTROUTING -s $CIDR -o $PNET -j MASQUERADE
iptables -t nat -A POSTROUTING -s $CIDR -o $PNET -j SNAT --to-source $IPADDR
iptables-save > /etc/iptables/rules.v4
iptEOF
screen -S configIptables -dm bash -c "bash /tmp/iptables-config.bash && rm -f /tmp/iptables-config.bash"

clear
echo -e "$bar1"
printf "%b\n" "\e[32m[\e[0mInfo\e[32m]\e[0m\e[97m ejecutando la instalación de BadVPN-udpgw en segundo plano\e[0m"
echo -e "$bar1"
cat <<'badvpnEOF'> /tmp/install-badvpn.bash
#!/bin/bash
if [[ -e /usr/local/bin/badvpn-udpgw ]]; then
 printf "%s\n" "BadVPN-udpgw ya instalado"
 exit 1
else
 curl -4skL "https://github.com/ambrop72/badvpn/archive/4b7070d8973f99e7cfe65e27a808b3963e25efc3.zip" -o /tmp/badvpn.zip
 unzip -qq /tmp/badvpn.zip -d /tmp && rm -f /tmp/badvpn.zip
 cd /tmp/badvpn-4b7070d8973f99e7cfe65e27a808b3963e25efc3
 cmake -DBUILD_NOTHING_BY_DEFAULT=1 -DBUILD_UDPGW=1 &> /dev/null
 make install &> /dev/null
 rm -rf /tmp/badvpn-4b7070d8973f99e7cfe65e27a808b3963e25efc3
 cat <<'EOFudpgw' > /lib/systemd/system/badvpn-udpgw.service
[Unit]
Description=BadVPN UDP Gateway Server daemon
Wants=network.target
After=network.target

[Service]
ExecStart=/usr/local/bin/badvpn-udpgw --listen-addr 127.0.0.1:7300 --max-clients 4000 --max-connections-for-client 4000 --loglevel info
Restart=always
RestartSec=3

[Install]
WantedBy=multi-user.target
EOFudpgw

systemctl daemon-reload &>/dev/null
systemctl restart badvpn-udpgw.service &>/dev/null
systemctl enable badvpn-udpgw.service &>/dev/null

fi
badvpnEOF
screen -S badvpninstall -dm bash -c "bash /tmp/install-badvpn.bash && rm -f /tmp/install-badvpn.bash"
}


function ConfigOpenSSH(){
  clear
  echo -e "$bar1"
echo -e "[\e[32mInfo\e[0m] Configuración del servicio OpenSSH"
echo -e "$bar2"
if [[ "$(cat < /etc/ssh/sshd_config | grep -c 'BonvScripts')" -eq 0 ]]; then
 cp /etc/ssh/sshd_config /etc/ssh/backup.sshd_config
fi
cat <<'EOFOpenSSH' > /etc/ssh/sshd_config
Port 22
Port 225
ListenAddress 0.0.0.0
Protocol 2
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_dsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
#HostKey /etc/ssh/ssh_host_ed25519_key
#KeyRegenerationInterval 3600
ServerKeyBits 1024
SyslogFacility AUTH
LogLevel INFO
PermitRootLogin yes
StrictModes yes
#RSAAuthentication yes
PubkeyAuthentication yes
IgnoreRhosts yes
#RhostsRSAAuthentication no
HostbasedAuthentication no
PermitEmptyPasswords no
ChallengeResponseAuthentication no
PasswordAuthentication yes
X11Forwarding yes
X11DisplayOffset 10
GatewayPorts yes
PrintMotd no
PrintLastLog yes
AcceptEnv LANG LC_*
Subsystem sftp /usr/lib/openssh/sftp-server
UsePAM yes
Banner /etc/banner.dat
TCPKeepAlive yes
ClientAliveInterval 240
ClientAliveCountMax 2
UseDNS no
EOFOpenSSH

curl -4skL "https://raw.githubusercontent.com/charawyner/comandos-vps-/main/banner.dat" -o /etc/banner.dat

sed -i '/password\s*requisite\s*pam_cracklib.s.*/d' /etc/pam.d/common-password && sed -i 's|use_authtok ||g' /etc/pam.d/common-password

echo -e "$bar1"
echo -e "[\e[33mNotice\e[0m] Reinicio del servicio OpenSSH.."
echo -e "$bar1"
systemctl restart ssh &> /dev/null
}


function ConfigDropbear(){
  clear
  echo -e "$bar1"
echo -e "[\e[32mInfo\e[0m] Configurando Dropbear.."
echo -e "$bar2"
echo -e "${azul}QUE PUERTOS DROPBEAR DESEA HABILITAR${cierre}"
echo -e "${azul}PUERTO 143 SIEMPRE ESTARA HABILITADO${cierre}"
echo -e "${azul}ELIJA UN PUERTO QUE NO ESTE OCUPADO${cierre}"
echo -e "$bar2"
read -p "$(echo -e "${amarillo}ingrese: ${cierre}")" -e -i 110 ptdpbr
cat > /etc/default/dropbear <<-EOF

NO_START=0
DROPBEAR_PORT=143
DROPBEAR_EXTRA_ARGS="-p $ptdpbr"
DROPBEAR_BANNER="/etc/banner"
DROPBEAR_RSAKEY="/etc/dropbear/dropbear_rsa_host_key"
DROPBEAR_DSSKEY="/etc/dropbear/dropbear_dss_host_key"
DROPBEAR_ECDSAKEY="/etc/dropbear/dropbear_ecdsa_host_key"
DROPBEAR_RECEIVE_WINDOW=65536
EOF

echo -e "[\e[33mNoticia\e[0m] Reinicio del servicio Dropbear.."
systemctl enable dropbear &>/dev/null
systemctl restart dropbear &>/dev/null
/etc/init.d/dropbear restart
}


function ConfigStunnel(){
if [[ ! "$(command -v stunnel4)" ]]; then
 StunnelDir='stunnel'
 else
 StunnelDir='stunnel4'
fi
clear
  echo -e "$bar1"
echo -e "[\e[32mInfo\e[0m] Configurando Stunnel.."
echo -e "$bar2"
echo -e "${azul}QUE PUERTOS SSL DESEA HABILITAR${cierre}"
echo -e "${azul}SE REQUIEREN 3 PUERTOS LOS CUALES SE REDIRIGEN${cierre}"
echo -e "${azul}ELIJA UN PUERTO QUE NO ESTE OCUPADO${cierre}"
echo -e "$bar1"
read -p "$(echo -e "${amarillo}ssl dropbear: ${cierre}")" -e -i 443 ssldbr
echo -e "$bar2"
read -p "$(echo -e "${amarillo}ssl openssh: ${cierre}")" -e -i 444 sslssh
echo -e "$bar2"
read -p "$(echo -e "${amarillo}ssl openvpn: ${cierre}")" -e -i 110 sslvpn
echo -e "$bar2"
cat <<'EOFStunnel1' > "/etc/default/$StunnelDir"
ENABLED=1
FILES="/etc/stunnel/*.conf"
OPTIONS=""
BANNER="/etc/banner.dat"
PPP_RESTART=0
# RLIMITS="-n 4096 -d unlimited"
RLIMITS=""
EOFStunnel1

rm -f /etc/stunnel/*
echo -e "[\e[32mInfo\e[0m] Cloning Stunnel.pem.."
openssl req -new -x509 -days 9999 -nodes -subj "/C=GB/ST=Greater Manchester/L=Salford/O=Sectigo Limited/CN=Sectigo RSA Domain Validation Secure Server CA" -out /etc/stunnel/stunnel.pem -keyout /etc/stunnel/stunnel.pem &> /dev/null
clear
echo -e "$bar1"
echo -e "[\e[32mInfo\e[0m] Creating Stunnel server config.."
echo -e "$bar1"
cat > /etc/stunnel/stunnel.conf <<-EOF
pid = /var/run/stunnel.pid
cert = /etc/stunnel/stunnel.pem
client = no
socket = l:TCP_NODELAY=1
socket = r:TCP_NODELAY=1
TIMEOUTclose = 0

[dropbear]
accept = $ssldbr
connect = 127.0.0.1:143

[openssh]
accept = $sslssh
connect = 127.0.0.1:22

[openvpn]
accept = $sslvpn
connect = 127.0.0.1:1194
EOF
echo -e "$bar1"
echo -e "[\e[33mNotice\e[0m] Reiniciar Stunnel.."
echo -e "$bar1"
systemctl restart "$StunnelDir"
}


function ConfigProxy(){
  clear
  echo -e "$bar1"
echo -e "[\e[32mInfo\e[0m] Configurando Privoxy.."
echo -e "$bar1"
rm -f /etc/privoxy/config*
cat <<'EOFprivoxy' > /etc/privoxy/config
user-manual /usr/share/doc/privoxy/user-manual
confdir /etc/privoxy
logdir /var/log/privoxy
filterfile default.filter
logfile logfile
listen-address 127.0.0.1:25800
toggle 1
enable-remote-toggle 0
enable-remote-http-toggle 0
enable-edit-actions 0
enforce-blocks 0
buffer-limit 4096
enable-proxy-authentication-forwarding 1
forwarded-connect-retries 1
accept-intercepted-requests 1
allow-cgi-request-crunching 1
split-large-forms 0
keep-alive-timeout 5
tolerate-pipelining 1
socket-timeout 300
EOFprivoxy
cat <<'EOFprivoxy2' > /etc/privoxy/user.action
{ +block }
/

{ -block }
IP-ADDRESS
127.0.0.1
EOFprivoxy2
sed -i "s|IP-ADDRESS|$(ip_address)|g" /etc/privoxy/user.action
clear
echo -e "$bar1"
echo -e "[\e[32mInfo\e[0m] Configurando Squid.."
echo -e "$bar2"
echo -e "${azul}QUE PUERTO SQUID DESEA HABILITAR${cierre}"
echo -e "${azul}PUERTO 8000 SIEMPRE ACTIVO${cierre}"
echo -e "${azul}ELIJA UN PUERTO QUE NO ESTE OCUPADO${cierre}"
echo -e "$bar1"
read -p "$(echo -e "${amarillo}ingrese: ${cierre}")" -e -i 8080 squidopt
echo -e "$bar2"
rm -rf /etc/squid/sq*
cat > /etc/squid/squid.conf <<-EOF

acl VPN dst IP-ADDRESS/32
http_access allow VPN
http_access deny all
http_port 0.0.0.0:$squidopt
http_port 0.0.0.0:8000
acl bonv src 0.0.0.0/0.0.0.0
no_cache deny bonv
dns_nameservers 1.1.1.1 1.0.0.1
visible_hostname localhost
EOF
sed -i "s|IP-ADDRESS|$(ip_address)|g" /etc/squid/squid.conf
echo -e "$bar1"
echo -e "[\e[33mNotice\e[0m] Reinicio del servicio Privoxy.."
echo -e "$bar2"
systemctl restart privoxy
echo -e "[\e[33mNotice\e[0m] Reinicio del servicio Squid.."
echo -e "$bar1"
systemctl restart squid
systemctl restart squid3
service squid restart

echo -e "[\e[32mInfo\e[0m] Configuring OHPServer"
if [[ ! -e /etc/ohpserver ]]; then
 mkdir /etc/ohpserver
 else
 rm -rf /etc/ohpserver/*
fi
curl -4skL "https://raw.githubusercontent.com/89870must73/REPO/main/ohpserver-linux32.zip" -o /etc/ohpserver/ohp.zip
unzip -qq /etc/ohpserver/ohp.zip -d /etc/ohpserver
rm -rf /etc/ohpserver/ohp.zip
chmod +x /etc/ohpserver/ohpserver

cat <<'Ohp1' > /etc/ohpserver/run
#!/bin/bash
# BonvScripts
# https://t.me/BonvScripts
# Please star my Repository: https://github.com/Bonveio/BonvScripts
# https://phcorner.net/threads/739298
# OHPServer startup script
/etc/ohpserver/ohpserver -port 8085 -proxy 127.0.0.1:25800 -tunnel 127.0.0.1:143 > /etc/ohpserver/dropbear.log &
/etc/ohpserver/ohpserver -port 8086 -proxy 127.0.0.1:25800 -tunnel 127.0.0.1:225 > /etc/ohpserver/openssh.log &
/etc/ohpserver/ohpserver -port 8087 -proxy 127.0.0.1:25800 -tunnel 127.0.0.1:1194 > /etc/ohpserver/openvpn.log &
/etc/ohpserver/ohpserver -port 8088 -proxy 127.0.0.1:25800 -tunnel 127.0.0.1:25980 > /etc/ohpserver/openvpn.log
Ohp1
chmod +x /etc/ohpserver/run

cat <<'Ohp2' > /etc/ohpserver/stop
#!/bin/bash
# BonvScripts
# https://t.me/BonvScripts
# Please star my Repository: https://github.com/Bonveio/BonvScripts
# https://phcorner.net/threads/739298
# OHPServer stop script
lsof -t -i tcp:8085 -s tcp:listen | xargs kill 2>/dev/null ### Dropbear
lsof -t -i tcp:8086 -s tcp:listen | xargs kill 2>/dev/null ### OpenSSH
lsof -t -i tcp:8087 -s tcp:listen | xargs kill 2>/dev/null ### OpenVPN TCP RSA
lsof -t -i tcp:8088 -s tcp:listen | xargs kill 2>/dev/null ### OpenVPN TCP EC
Ohp2
chmod +x /etc/ohpserver/stop

cat <<'EOFohp' > /lib/systemd/system/ohpserver.service
[Unit]
Description=OpenHTTP Puncher Server
Wants=network.target
After=network.target

[Service]
ExecStart=/bin/bash /etc/ohpserver/run 2>/dev/null
ExecStop=/bin/bash /etc/ohpserver/stop 2>/dev/null
Restart=always
RestartSec=3

[Install]
WantedBy=multi-user.target
EOFohp
systemctl daemon-reload &>/dev/null
systemctl restart ohpserver.service &>/dev/null
systemctl enable ohpserver.service &>/dev/null
}


function ConfigWebmin(){
printf "%b\n" "\e[1;32m[\e[0mInfo\e[1;32m]\e[0m\e[97m running Webmin installation on background\e[0m"
cat <<'webminEOF'> /tmp/install-webmin.bash
#!/bin/bash
if [[ -e /etc/webmin ]]; then
 echo 'Webmin already installed' && exit 1
fi
rm -rf /etc/apt/sources.list.d/webmin*
echo 'deb https://download.webmin.com/download/repository sarge contrib' > /etc/apt/sources.list.d/webmin.list
apt-key del 1719003ACE3E5A41E2DE70DFD97A3AE911F63C51 &> /dev/null
wget -qO - https://download.webmin.com/jcameron-key.asc | apt-key add - &> /dev/null
apt update &> /dev/null
apt install webmin -y &> /dev/null
sed -i "s|\(ssl=\).\+|\10|" /etc/webmin/miniserv.conf
lsof -t -i tcp:10000 -s tcp:listen | xargs kill 2>/dev/null
systemctl restart webmin &> /dev/null
systemctl enable webmin &> /dev/null
webminEOF
screen -S webmininstall -dm bash -c "bash /tmp/install-webmin.bash && rm -f /tmp/install-webmin.bash"
}

function ConfigOpenVPN(){
echo -e "[\e[32mInfo\e[0m] Configuring OpenVPN server.."
if [[ ! -e /etc/openvpn ]]; then
 mkdir -p /etc/openvpn
 else
 rm -rf /etc/openvpn/*
fi
mkdir -p /etc/openvpn/server
mkdir -p /etc/openvpn/client

cat <<'EOFovpn1' > /etc/openvpn/server/server_tcp.conf
port 1194
proto tcp
dev tun
dev-type tun
sndbuf 100000
rcvbuf 100000
crl-verify crl.pem
ca ca.crt
cert server.crt
key server.key
tls-auth ta.key 0
dh dh.pem
topology subnet
server 10.9.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt
push "redirect-gateway def1 bypass-dhcp"
push "dhcp-option DNS 8.8.8.8"
push "dhcp-option DNS 8.8.4.4"
keepalive 10 120
cipher AES-256-CBC
auth SHA256
comp-lzo
user nobody
group nogroup
persist-tun
status openvpn-status.log
verb 2
mute 3
plugin PLUGIN_AUTH_PAM /etc/pam.d/login
verify-client-cert none
username-as-common-name
EOFovpn1
cat <<'EOFovpn2' > /etc/openvpn/server/server_udp.conf
port 25222
proto udp
dev tun
user nobody
group nogroup
persist-key
persist-tun
keepalive 10 120
topology subnet
server 10.8.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt
push "dhcp-option DNS 1.0.0.1"
push "dhcp-option DNS 1.1.1.1"
push "redirect-gateway def1 bypass-dhcp" 
crl-verify crl.pem
ca ca.crt
cert server.crt
key server.key
tls-auth tls-auth.key 0
dh dh.pem
auth SHA256
cipher AES-128-CBC
tls-server
tls-version-min 1.2
tls-cipher TLS-DHE-RSA-WITH-AES-128-GCM-SHA256
status openvpn.log
verb 3
plugin PLUGIN_AUTH_PAM /etc/pam.d/login
verify-client-cert none
username-as-common-name
EOFovpn2


 cat <<'EOF7'> /etc/openvpn/ca.crt
-----BEGIN CERTIFICATE-----
MIIDQjCCAiqgAwIBAgIUVFciiqRsnC/L0LsbIIPQq+tEgZswDQYJKoZIhvcNAQEL
BQAwEzERMA8GA1UEAwwIQ2hhbmdlTWUwHhcNMjEwMzE1MTkwMDA3WhcNMzEwMzEz
MTkwMDA3WjATMREwDwYDVQQDDAhDaGFuZ2VNZTCCASIwDQYJKoZIhvcNAQEBBQAD
ggEPADCCAQoCggEBANnjrTnNJVM9+jJZ8zrj8uJK+5z2sa2gaSqbh9nsB1q9JMqy
ph7zQTQONDPYZ2hLFXx/4XpXboJbt+1n28sCr5/6AiJeOvxQSB4eqs3GNDeAuXaX
NWvmLsTl9VdScgMRgLZkSS2cGaGqNF9+Rdnv2LONtzuoLY1XDov7Usx58in2kRd4
UPR7dxOlaag6ZkZrWK1RBbnAbSxNkvNvOZkUSDBdWpvsSLfljCS0/hUI05a/37cg
I23NwEpoQANDsLKoayax5jbEm2WvTu7tBH6Kg2jiMDsTktZ5+OChHGi75nW19OfH
TdnIDLnIhiWAVSJrp5aerfJbG0ywYjfHsnkOW3kCAwEAAaOBjTCBijAdBgNVHQ4E
FgQUkG8zRu/6lHadkyzKcuEbolkAXF8wTgYDVR0jBEcwRYAUkG8zRu/6lHadkyzK
cuEbolkAXF+hF6QVMBMxETAPBgNVBAMMCENoYW5nZU1lghRUVyKKpGycL8vQuxsg
g9Cr60SBmzAMBgNVHRMEBTADAQH/MAsGA1UdDwQEAwIBBjANBgkqhkiG9w0BAQsF
AAOCAQEA0oHokuDzPeVB+8VxFKXXOnJdxVolCl+r5jKx6FSD5tg3UpTjgAEujt/E
jbT3sTGcBQhFfi953LEO+ENk5D4FrLmA74GxvmSMJSYMhn9DwbWSmd5UNwgSCC1W
PS3bmMjVotgLaWh/y7S2YCRgyMMTEyAbke3X+Og8VALhjS4/nHFkuvcQIkJR4wri
AYO5s63crLJd6CkrJtT1O8OdPEWIgwhHDv2x/et9Jackn2LUMBHS4LLOzBvRq24u
flx690UllC1lYs7phoph0v7yRzGdbxuvV5NAE5vUfR35IK/y/mX7cTDfChG/O78T
nUjydhVmGWjLoHn/wqk3u5nzi7Hk5Q==
-----END CERTIFICATE-----
EOF7
 cat <<'EOF9'> /etc/openvpn/client.crt
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            81:33:7e:86:11:35:29:cc:2e:ce:77:41:18:87:bc:cf
        Signature Algorithm: sha256WithRSAEncryption
        Issuer: CN=ChangeMe
        Validity
            Not Before: Mar 15 19:00:08 2021 GMT
            Not After : Jun 18 19:00:08 2023 GMT
        Subject: CN=client
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                RSA Public-Key: (2048 bit)
                Modulus:
                    00:92:bd:0a:31:34:ce:98:eb:18:ab:27:f6:3e:2d:
                    28:bf:b0:9c:c8:ef:af:24:92:c3:61:39:df:35:c5:
                    29:0f:20:17:81:ce:53:ae:d3:89:8a:e4:56:78:7a:
                    f0:aa:a9:f3:73:86:e9:ed:fb:27:29:75:08:e6:35:
                    c6:e4:0d:35:20:8f:50:9f:bd:b8:a1:32:36:dd:b5:
                    7c:e3:9a:35:98:1e:d2:70:98:55:ba:3e:ec:bf:a5:
                    65:49:30:90:f4:0e:43:c2:c4:1a:42:86:91:62:33:
                    62:4b:87:c1:3b:76:d7:17:9e:8f:32:fc:c8:ba:a6:
                    8d:38:66:2e:0f:94:f0:7f:57:23:28:c0:b4:13:d5:
                    02:d5:39:cb:04:53:8e:59:2a:a3:b6:98:ea:b4:a2:
                    e3:e5:d0:48:9f:6e:f0:04:4f:11:f5:ff:6e:68:45:
                    8e:fd:bc:a3:11:fd:a3:cf:3e:c7:2e:1c:97:24:5f:
                    75:ae:b3:35:80:bd:a0:32:c2:36:2b:1b:ff:64:8e:
                    ba:f4:81:60:0d:0b:87:4e:b6:6e:a9:f1:f9:1b:11:
                    c7:54:cd:89:c9:d9:28:3d:b0:98:d8:5c:d4:cd:d6:
                    f1:f3:33:fb:7b:a4:a9:d4:8e:3d:ff:78:58:bc:33:
                    46:e9:76:e1:d3:ba:e8:a5:ea:5e:25:ef:91:23:5b:
                    4a:1b
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Basic Constraints: 
                CA:FALSE
            X509v3 Subject Key Identifier: 
                3C:F6:52:8F:96:1A:B2:00:EE:95:27:FF:89:0D:56:C8:29:6A:99:41
            X509v3 Authority Key Identifier: 
                keyid:90:6F:33:46:EF:FA:94:76:9D:93:2C:CA:72:E1:1B:A2:59:00:5C:5F
                DirName:/CN=ChangeMe
                serial:54:57:22:8A:A4:6C:9C:2F:CB:D0:BB:1B:20:83:D0:AB:EB:44:81:9B

            X509v3 Extended Key Usage: 
                TLS Web Client Authentication
            X509v3 Key Usage: 
                Digital Signature
    Signature Algorithm: sha256WithRSAEncryption
         14:28:d6:d1:c1:ab:79:72:b0:e6:8d:3e:53:d7:06:d7:5c:03:
         9e:39:66:97:bc:1f:0b:3f:56:27:83:63:cd:63:65:e0:07:b2:
         8e:bd:56:11:08:ce:d7:79:0b:00:fe:fa:98:4b:77:d2:f9:c8:
         f8:cf:10:88:45:1a:3a:9e:97:7e:8b:88:04:93:94:b6:67:df:
         15:a9:e9:7c:c2:98:47:cb:df:7e:0c:72:84:93:df:eb:a1:36:
         34:30:65:55:f0:ba:c5:17:9c:cb:c3:24:b9:8b:b8:8a:1a:38:
         55:05:b3:a5:c6:3f:67:c4:fc:df:b6:1f:9f:5f:09:b9:51:3f:
         fd:1d:d9:df:ba:b3:59:4e:a6:86:23:26:04:a1:93:94:ee:a8:
         0e:db:2b:3f:c2:28:4f:d0:62:e3:d5:81:cc:db:4a:cd:52:7e:
         49:ed:b2:67:81:ee:21:d7:95:e3:b5:36:8a:35:26:75:49:8c:
         bf:0f:b9:bd:04:91:87:e2:28:71:7e:91:c5:11:0c:26:38:7b:
         72:90:32:8a:e3:c5:e0:8b:e6:60:9c:83:a0:b2:ad:05:08:c8:
         a9:42:03:19:aa:92:dd:a1:98:56:0f:fd:f7:18:99:1d:8c:5a:
         ce:bf:22:00:9a:68:c0:bb:99:1d:ae:56:ea:63:44:d3:8d:bf:
         f9:4e:60:5a
-----BEGIN CERTIFICATE-----
MIIDTzCCAjegAwIBAgIRAIEzfoYRNSnMLs53QRiHvM8wDQYJKoZIhvcNAQELBQAw
EzERMA8GA1UEAwwIQ2hhbmdlTWUwHhcNMjEwMzE1MTkwMDA4WhcNMjMwNjE4MTkw
MDA4WjARMQ8wDQYDVQQDDAZjbGllbnQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
ggEKAoIBAQCSvQoxNM6Y6xirJ/Y+LSi/sJzI768kksNhOd81xSkPIBeBzlOu04mK
5FZ4evCqqfNzhunt+ycpdQjmNcbkDTUgj1CfvbihMjbdtXzjmjWYHtJwmFW6Puy/
pWVJMJD0DkPCxBpChpFiM2JLh8E7dtcXno8y/Mi6po04Zi4PlPB/VyMowLQT1QLV
OcsEU45ZKqO2mOq0ouPl0EifbvAETxH1/25oRY79vKMR/aPPPscuHJckX3WuszWA
vaAywjYrG/9kjrr0gWANC4dOtm6p8fkbEcdUzYnJ2Sg9sJjYXNTN1vHzM/t7pKnU
jj3/eFi8M0bpduHTuuil6l4l75EjW0obAgMBAAGjgZ8wgZwwCQYDVR0TBAIwADAd
BgNVHQ4EFgQUPPZSj5YasgDulSf/iQ1WyClqmUEwTgYDVR0jBEcwRYAUkG8zRu/6
lHadkyzKcuEbolkAXF+hF6QVMBMxETAPBgNVBAMMCENoYW5nZU1lghRUVyKKpGyc
L8vQuxsgg9Cr60SBmzATBgNVHSUEDDAKBggrBgEFBQcDAjALBgNVHQ8EBAMCB4Aw
DQYJKoZIhvcNAQELBQADggEBABQo1tHBq3lysOaNPlPXBtdcA545Zpe8Hws/VieD
Y81jZeAHso69VhEIztd5CwD++phLd9L5yPjPEIhFGjqel36LiASTlLZn3xWp6XzC
mEfL334McoST3+uhNjQwZVXwusUXnMvDJLmLuIoaOFUFs6XGP2fE/N+2H59fCblR
P/0d2d+6s1lOpoYjJgShk5TuqA7bKz/CKE/QYuPVgczbSs1SfkntsmeB7iHXleO1
Noo1JnVJjL8Pub0EkYfiKHF+kcURDCY4e3KQMorjxeCL5mCcg6CyrQUIyKlCAxmq
kt2hmFYP/fcYmR2MWs6/IgCaaMC7mR2uVupjRNONv/lOYFo=
-----END CERTIFICATE-----
EOF9
 cat <<'EOF10'> /etc/openvpn/client.key
-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCSvQoxNM6Y6xir
J/Y+LSi/sJzI768kksNhOd81xSkPIBeBzlOu04mK5FZ4evCqqfNzhunt+ycpdQjm
NcbkDTUgj1CfvbihMjbdtXzjmjWYHtJwmFW6Puy/pWVJMJD0DkPCxBpChpFiM2JL
h8E7dtcXno8y/Mi6po04Zi4PlPB/VyMowLQT1QLVOcsEU45ZKqO2mOq0ouPl0Eif
bvAETxH1/25oRY79vKMR/aPPPscuHJckX3WuszWAvaAywjYrG/9kjrr0gWANC4dO
tm6p8fkbEcdUzYnJ2Sg9sJjYXNTN1vHzM/t7pKnUjj3/eFi8M0bpduHTuuil6l4l
75EjW0obAgMBAAECggEABQSD0bTtj5sSZ9/g8rVWnF9srQ5NHeIK3ks9T7hjNAoz
45NrlyHSpTYzosEJc7yF/6BQZXveFfPTjxOtrmSpOWjNJ/kz1AdEiwZGs/208XO0
XHdJDypRrCf6s6r+een29TUBdN7nH8WECfMlb2Qb7MnWObcdIgzJ7XDJCG1eX+xM
nSV8juGWNYvarOkwOYCBwp5m3Cpom+FUbqPjpzRvEXY+ZXANwEiOXT+RueJCJ88/
nWYWWtvnFo+FApI90EuQs3Jjntm8Z1J0Ey2uRlnzCBK7JHLVON9b0oYsVH2bIC9i
0WlVBR3MXGQ3LSxnusxH7wmL6iPh3nOT4ZZLIliZgQKBgQDChbuVYw8DyM9KLsYG
6t/U5oPQrU+9rQl27+2OXXMXiTyUqF+Df+REneFu4SkSu2BgpR/49641mhCR8vN6
EyApDObtPxaqEpqYVfqHNIYLFLqJHYY3RM9e6StdDQYa1k80WtOuYHZ3yDu5VQEw
l+AagYWbx/ee9QM052KzJ8IY2wKBgQDBHT1ba9+TFNy2b+ZGH7q6Wbd9HpkWMih0
PrgQ/cgvNpQH0pTqqu7MmSE8avHx5hDtMtvnEtW2ZS27pa0bE17+UrusNePihfAl
RnEHU5Uf8VlGTltZ3UZ63UKJgyZVsVTn4pyRXgdNGZ84FY0Z1t9ev0b0hKV4t7S+
33yteWa3wQKBgDxPODR9zObweIxYah807QbWHWIyibmWD4wnoTB1erx+WSEB/vMH
UN+RT5aQCqr7G0t7hqkrKYEG7kJB4AkmKt9vV52Q5NcAA5xdc9o9h52h5J+kXrt+
Awk7I62q3wytC0uBKYYz9Cb5FsNEPqUxQVMWezUsT3KiJkddwfUny37nAoGAbNTT
rV//4d4R/ObXOZHMJBVHqUXDNJUT418tULYVSTZS+o2cyxuF9NwftPL4Y0ErLOJK
t9EPi/k9atEV23pxQJbTmVvNj+23xuoJ7P0Xv6a+jza9mMlxXPCw/Npikkyb8wrs
/aemKbdU2cCbgoJr4/OcQ1U2A/BT9nXwx7rxPoECgYEApNI+KVuz95Obh0/qnitl
7TqzRLYTOsN55SleonNaXU1qnbERAu1KzL86PwbCVxd0F+jkG6lyAuI+1Iv539C7
EhwwvddvRqzr249+UchQ+ijXaQ0EtmsDYDQBSRa4YZLdVO8F3h7+ieYbzNZyn5Vn
ASO6ZSFR3vy6kDVUEdwAC2g=
-----END PRIVATE KEY-----
EOF10
 cat <<'EOF18'> /etc/openvpn/tls-auth.key
#
# 2048 bit OpenVPN static key
#
-----BEGIN OpenVPN Static key V1-----
bdcfd0846a6e313b81166314b6b3837c
b4860c3d84ac2f17fcf26a7ca090974c
97ec8395c67b98090560e82120b16eb0
d3f237fb7d5033985db907a3e3fce5ab
ee5bad86b77a36166f80b594aa3b53db
87863f3250e931d37a1b66703d7691b7
88c4e0e648fa278da3c883247daa3c38
379a26c262ed37a6ee1ec7ba826e703b
e9f4a494f89b253499e0b64f20250157
cb182c932bdd916de5aef07ff6e5a4ee
b3eb7aec6a058785ff771d2c18432790
195eae67a96f383be5931c1356734a6b
f4c619cb97094fd337f971b340bad41b
bb774d630c2eb24fd0057785d505afee
6a2749f79febf7bdb1e5a6c62f250c55
2f2448e5be01abb287151073d53f3996
-----END OpenVPN Static key V1-----
EOF18
 cat <<'EOF107'> /etc/openvpn/server.crt
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            3c:7a:4b:8b:00:12:bd:f8:f7:0c:e0:24:97:9d:10:dd
        Signature Algorithm: sha256WithRSAEncryption
        Issuer: CN=ChangeMe
        Validity
            Not Before: Mar 15 19:00:08 2021 GMT
            Not After : Jun 18 19:00:08 2023 GMT
        Subject: CN=server
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                RSA Public-Key: (2048 bit)
                Modulus:
                    00:98:77:d1:23:00:51:bb:50:de:f0:35:8e:07:23:
                    06:08:56:df:89:83:dc:2d:ed:da:74:0e:4a:e9:47:
                    91:a1:02:d1:eb:74:a0:25:80:95:e6:ff:48:99:95:
                    bf:74:77:cb:a8:3c:eb:20:8a:62:8c:43:bc:53:df:
                    2a:9a:b7:fc:f3:6c:f0:44:38:0a:e7:33:41:b4:3f:
                    f6:ce:00:c0:ad:80:03:66:60:81:18:4b:27:be:f0:
                    c8:7e:56:c6:78:6a:d0:ee:97:c9:24:d6:5c:b5:25:
                    c2:06:ef:94:2e:11:24:cb:a1:58:bc:cb:ad:be:27:
                    aa:6c:2c:38:de:90:53:86:d6:da:7b:60:73:0a:89:
                    e5:2b:d7:a8:fe:3a:8b:a6:4e:5c:13:bd:90:01:42:
                    d4:ad:1c:e4:a4:c5:f8:f6:36:98:e5:2a:90:39:7d:
                    70:5c:a2:17:5c:c8:d4:7c:10:24:2c:38:a6:75:a7:
                    3d:02:15:d2:f1:27:7c:75:e3:33:ef:82:f4:aa:97:
                    4c:d4:cc:f2:85:96:80:dc:46:71:2e:74:a7:19:49:
                    23:3d:d3:77:3b:63:5a:29:d1:ad:bd:cf:17:43:d3:
                    ab:8f:9f:97:0b:1b:93:8b:54:02:88:3c:82:1e:88:
                    5c:25:df:ad:00:a9:45:22:d1:f7:81:e6:20:b2:5c:
                    d4:af
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Basic Constraints: 
                CA:FALSE
            X509v3 Subject Key Identifier: 
                0D:0D:03:A4:DC:D7:7F:39:D3:EB:AB:DA:04:FD:EF:90:16:59:FC:CC
            X509v3 Authority Key Identifier: 
                keyid:90:6F:33:46:EF:FA:94:76:9D:93:2C:CA:72:E1:1B:A2:59:00:5C:5F
                DirName:/CN=ChangeMe
                serial:54:57:22:8A:A4:6C:9C:2F:CB:D0:BB:1B:20:83:D0:AB:EB:44:81:9B

            X509v3 Extended Key Usage: 
                TLS Web Server Authentication
            X509v3 Key Usage: 
                Digital Signature, Key Encipherment
            X509v3 Subject Alternative Name: 
                DNS:server
    Signature Algorithm: sha256WithRSAEncryption
         44:c0:87:e6:07:f4:f9:0f:a4:60:2a:f6:67:0f:7f:6a:26:38:
         9e:26:61:1b:97:f0:1c:ef:87:a6:fc:05:a2:bd:4f:ed:fa:a9:
         13:a2:72:14:70:46:0e:38:33:eb:ae:07:f3:ae:e4:c3:68:28:
         aa:a1:aa:09:23:23:0c:0e:7b:20:2e:e1:ad:d7:c3:55:92:77:
         3c:af:ec:09:84:29:5d:a4:d5:98:e5:86:04:05:67:99:7c:ae:
         f4:6e:09:1a:ac:79:fd:ef:36:3f:c5:fb:d0:48:1d:76:ba:9c:
         a7:49:62:8a:c1:96:a6:fb:f9:0c:c6:18:d3:64:02:ac:ab:f0:
         66:27:96:96:77:2d:8f:1a:ea:8f:fe:98:00:7a:ac:7c:7d:4e:
         67:6b:51:9f:36:8f:0c:f4:9f:a0:9d:6e:59:53:ac:58:fe:be:
         db:67:cb:fb:8e:f3:d7:23:26:05:10:5c:3a:c3:b1:89:4a:8c:
         7e:80:9b:1f:5d:18:ac:b4:86:b8:89:9f:c8:6c:82:9f:bf:65:
         a2:21:77:ab:cb:a6:c8:cb:62:0d:ba:b4:ab:c6:62:b1:7f:26:
         d3:a1:a8:e8:ae:7e:3c:fb:35:f0:97:3c:d0:7a:ef:a6:9b:d9:
         59:9d:62:b1:11:b7:63:3f:05:58:52:b2:74:fb:df:3b:ee:d7:
         56:97:2f:1f
-----BEGIN CERTIFICATE-----
MIIDYTCCAkmgAwIBAgIQPHpLiwASvfj3DOAkl50Q3TANBgkqhkiG9w0BAQsFADAT
MREwDwYDVQQDDAhDaGFuZ2VNZTAeFw0yMTAzMTUxOTAwMDhaFw0yMzA2MTgxOTAw
MDhaMBExDzANBgNVBAMMBnNlcnZlcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC
AQoCggEBAJh30SMAUbtQ3vA1jgcjBghW34mD3C3t2nQOSulHkaEC0et0oCWAleb/
SJmVv3R3y6g86yCKYoxDvFPfKpq3/PNs8EQ4CuczQbQ/9s4AwK2AA2ZggRhLJ77w
yH5Wxnhq0O6XySTWXLUlwgbvlC4RJMuhWLzLrb4nqmwsON6QU4bW2ntgcwqJ5SvX
qP46i6ZOXBO9kAFC1K0c5KTF+PY2mOUqkDl9cFyiF1zI1HwQJCw4pnWnPQIV0vEn
fHXjM++C9KqXTNTM8oWWgNxGcS50pxlJIz3TdztjWinRrb3PF0PTq4+flwsbk4tU
Aog8gh6IXCXfrQCpRSLR94HmILJc1K8CAwEAAaOBsjCBrzAJBgNVHRMEAjAAMB0G
A1UdDgQWBBQNDQOk3Nd/OdPrq9oE/e+QFln8zDBOBgNVHSMERzBFgBSQbzNG7/qU
dp2TLMpy4RuiWQBcX6EXpBUwEzERMA8GA1UEAwwIQ2hhbmdlTWWCFFRXIoqkbJwv
y9C7GyCD0KvrRIGbMBMGA1UdJQQMMAoGCCsGAQUFBwMBMAsGA1UdDwQEAwIFoDAR
BgNVHREECjAIggZzZXJ2ZXIwDQYJKoZIhvcNAQELBQADggEBAETAh+YH9PkPpGAq
9mcPf2omOJ4mYRuX8Bzvh6b8BaK9T+36qROichRwRg44M+uuB/Ou5MNoKKqhqgkj
IwwOeyAu4a3Xw1WSdzyv7AmEKV2k1ZjlhgQFZ5l8rvRuCRqsef3vNj/F+9BIHXa6
nKdJYorBlqb7+QzGGNNkAqyr8GYnlpZ3LY8a6o/+mAB6rHx9TmdrUZ82jwz0n6Cd
bllTrFj+vttny/uO89cjJgUQXDrDsYlKjH6Amx9dGKy0hriJn8hsgp+/ZaIhd6vL
psjLYg26tKvGYrF/JtOhqOiufjz7NfCXPNB676ab2VmdYrERt2M/BVhSsnT73zvu
11aXLx8=
-----END CERTIFICATE-----
EOF107
 cat <<'EOF113'> /etc/openvpn/server.key
-----BEGIN PRIVATE KEY-----
MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCYd9EjAFG7UN7w
NY4HIwYIVt+Jg9wt7dp0DkrpR5GhAtHrdKAlgJXm/0iZlb90d8uoPOsgimKMQ7xT
3yqat/zzbPBEOArnM0G0P/bOAMCtgANmYIEYSye+8Mh+VsZ4atDul8kk1ly1JcIG
75QuESTLoVi8y62+J6psLDjekFOG1tp7YHMKieUr16j+OoumTlwTvZABQtStHOSk
xfj2NpjlKpA5fXBcohdcyNR8ECQsOKZ1pz0CFdLxJ3x14zPvgvSql0zUzPKFloDc
RnEudKcZSSM903c7Y1op0a29zxdD06uPn5cLG5OLVAKIPIIeiFwl360AqUUi0feB
5iCyXNSvAgMBAAECggEAI2IC9dV4IjlVU3eKO1vEZaELhVVFfp8pSC+c8OA8Cpql
7reFBs79ersZtRLMeJHogGWKx2V2E0kQ5oHu2DMEj9VjOOGsnhUGFXeWph4EmP8R
SuvwaZvfYG9uh+tJad6YGBa/hj39C8j0azmkMMCnwl3yQvYdnviDk1D77aKez7an
Csuk4Yxj1VhOVeNfe2Jy04wkbkyzhljAosf35AieIlYrbmJzFIc5gNQpbU0agrEF
QUyb83Y8fBNtxh7XWprRNzBT5CIrrnASxglmDAWtsQzlF6ApnCK6qm/SPohQwhay
aMDORrEezyRup63HQqbcfqlZbKFzfRdesdHInii9KQKBgQDKCv3GlvSEqstIXF8A
FWA6TNqHbJrXyKxjywhiMdzNqlMbt1J+TTv6MYUXBTPgUfNYCynnK/kv+ltqKPUm
k7jFXpRuH+QlK0adbn4UbQhzpClylnnpEP5ytc3JcUehlvzcG659LuEjI292wwuA
/zNr6Q6cuGZ7hTOf7e8dyWgFlQKBgQDBL42myuvAydQDE3IeiBgxILzB8hKFe/3K
5ymW5tB9xOTKQkZkFNjs6Q14Dr6kxojWdvs3+ZdCdcwOo4EKDUxzoqMX/toYD3az
IrVbgL3KjB+afm02GEbt7kaRuzmFoA5MK+WJbqCm+KDVbQRzY3dbkTuCM9h5SJoN
stO0/rbYMwKBgC4KLyYPxAxvNv94PRWxyUm/tZRihS5ixhW/cFuf7SbYhzOrpJqv
UtmCa0eBof6d7gvED3pkJNZwAGDCkIqH4vTmxoAJuF1X7TF2ujhBWEmxwNghvgoE
G1dcYlZi/+WsmFY34J0aD6eILaAsdfShMsCGTRQdWQ0Qn2D0QSbSfGe5AoGBAIhN
pQQp6Gz9+jixX7NrEqaXEpdE1QyZj1e6Af4WnMQgR8ztNf0nOGbviDFNNfXMnn+z
M00rLS4XLwKlGkadW3O7LJehmP+g6X863frRuxdOBn5a9XNVbbYyiFgKYWuGoo/b
6PgutesZQWFUqe9AHtbcgcA8FGB+eTNxGS57CUdBAoGBAJnOKqbN9QJ8hctAJM+3
0Gm9fa6IK2KU59kdy7tZ2Aa9cIutyMh20p6YtD0maatR9XxYSrxNdntTREXOd43y
0y0uox0lVE2i5yFeGFmH9QZt8i4Ym5a9m8yX0ayXYTYRdbdBO217WHeWmpjbCw08
J5S/8MJ7AQaeacBMt6evLPMG
-----END PRIVATE KEY-----
EOF113
 cat <<'EOF13'> /etc/openvpn/dh.pem
-----BEGIN DH PARAMETERS-----
MIIBCAKCAQEAspXWP1raVMg0U8rNBE+CIT43EgzhjejYJut4NHdIFyZxToXTMe68
+Zvpq6nTqK4NXpo3Nj8ghID9nhkjiwrIQYuRf1s4R225RBBdf3Pv6IRawaQSHnVE
IdC3JZf60H2WkFINNTJ6MQ58Pj0KSjStXWiRLzErJpVDC4dxCYETFHkKmH8miyzo
e9esKCiz9fOG5cTaQde+38lXcrL7lgZIFGIOfPp0ajHNo7lsmJLL6p9qk29C7KaW
+WOu0XHdOMazl8E/88f/kqMuhF2bTXLIxGN2A2TsXZeDORsA87Y7AK5Ij5ARHJV4
1z1JywraZZ5zJYTOxl242fI8bvC68+3YswIBAg==
-----END DH PARAMETERS-----
EOF13
 cat <<'EOF103'> /etc/openvpn/crl.pem
-----BEGIN X509 CRL-----
MIIBsDCBmQIBATANBgkqhkiG9w0BAQsFADATMREwDwYDVQQDDAhDaGFuZ2VNZRcN
MjEwMzE1MTkwMDA4WhcNMjEwOTExMTkwMDA4WqBSMFAwTgYDVR0jBEcwRYAUkG8z
Ru/6lHadkyzKcuEbolkAXF+hF6QVMBMxETAPBgNVBAMMCENoYW5nZU1lghRUVyKK
pGycL8vQuxsgg9Cr60SBmzANBgkqhkiG9w0BAQsFAAOCAQEAWyN2Q11kQlcFrEm4
GIrKEqSudIq4uL1HMatD28vVjgZtBTLbyySwmDUMKRpcWnKRAwJe+vbKw3HT3RYY
07oCqwBf3QpprIY3OmRj7UZBzXP9WAo+KFh0PdzELj4oWf54KU8fchRJIGZjffES
AlgFR1OOImML+tdDFamEdGjJy2RRuUvrGy2rUAHz/pQrGEqq6VJYDxwPwnuu2WH+
YDZJZuZeAEVxgKt3XWvZ5Bvdgg3TFn/UsEPANIDwY0UQcu3T57erT1XvBMWhcI5+
vepcxEPNkqQF61gfCCF13yT0zxFxUuTScJyRfncypDrhaDO5noklr+s5h8vcFocI
WorPOg==
-----END X509 CRL-----
EOF103
 cat <<'EOF122'> /etc/openvpn/ta.key
#
# 2048 bit OpenVPN static key
#
-----BEGIN OpenVPN Static key V1-----
8dae585618bdb9284931f6e9a84010e1
4193423f573ad617245dde1b425cffa2
a577c2b26ae398b1b697a913e8c42914
78b493816af79ac0be194880a315a35b
d0131f71b6c1dddfc070a6f1b629bf99
fb7885eaad47166f6ff962f3aaad3b3c
ff7425e5cc4b99754b43cfe26812a00d
72706f716b90202ae512736983d94cbc
8331ba27b3681e9d60b0585bb43d99f1
1768b2d9ff3f915201c03225db7db251
8805de05750656ea26eb9dafc3dea651
c40480fefe0d5cf32c1a95ecf4a61c55
c60b28089fee6ffafa9bc5068d536e0e
e342ab33ee8c7061e3e7b23017e0674a
1ece34ae3b258f5902b7ddc606f1a76f
38322e3be857ad2ce5ad8bebb0df8358
-----END OpenVPN Static key V1-----
EOF122

cat <<'NUovpn' > /etc/openvpn/server/server.conf
 ### Do not overwrite this script if you didnt know what youre doing ###
 #
 # New Update are now released, OpenVPN Server
 # are now running both TCP and UDP Protocol. (Both are only running on IPv4)
 # But our native server.conf are now removed and divided
 # Into two different configs base on their Protocols:
 #  * OpenVPN TCP (located at /etc/openvpn/server/server_tcp.conf
 #  * OpenVPN UDP (located at /etc/openvpn/server/server_udp.conf
 # 
 # Also other logging files like
 # status logs and server logs
 # are moved into new different file names:
 #  * OpenVPN TCP Server logs (/etc/openvpn/server/tcp.log)
 #  * OpenVPN UDP Server logs (/etc/openvpn/server/udp.log)
 #  * OpenVPN TCP Status logs (/etc/openvpn/server/tcp_stats.log)
 #  * OpenVPN UDP Status logs (/etc/openvpn/server/udp_stats.log)
 #
 # Since config file name changes, systemctl/service identifiers are changed too.
 # To restart TCP Server: systemctl restart openvpn-server@server_tcp
 # To restart UDP Server: systemctl restart openvpn-server@server_udp
 #
 # Server ports are configured base on env vars
 # executed/raised from this script (OpenVPN_TCP_Port/OpenVPN_UDP_Port)
 #
 # Enjoy the new update
 # Script Updated by Bonveio
NUovpn

wget -qO /etc/openvpn/b.zip 'https://raw.githubusercontent.com/89870must73/REPO/main/openvpn_plugin64'
unzip -qq /etc/openvpn/b.zip -d /etc/openvpn
rm -f /etc/openvpn/b.zip

ovpnPluginPam="$(find /usr -iname 'openvpn-*.so' | grep 'auth-pam' | head -n1)"
if [[ -z "$ovpnPluginPam" ]]; then
 sed -i "s|PLUGIN_AUTH_PAM|/etc/openvpn/openvpn-auth-pam.so|g" /etc/openvpn/server/*.conf
else
 sed -i "s|PLUGIN_AUTH_PAM|$ovpnPluginPam|g" /etc/openvpn/server/*.conf
fi

sed -i '/net.ipv4.ip_forward.*/d' /etc/sysctl.conf
sed -i '/#net.ipv4.ip_forward.*/d' /etc/sysctl.conf
sed -i '/net.ipv4.ip_forward.*/d' /etc/sysctl.d/*
sed -i '/#net.ipv4.ip_forward.*/d' /etc/sysctl.d/*
echo 'net.ipv4.ip_forward=1' > /etc/sysctl.d/20-openvpn.conf
sysctl --system &> /dev/null

if [[ "$(hostnamectl | grep -i Virtualization | awk '{print $2}' | head -n1)" == 'openvz' ]]; then
 sed -i 's|LimitNPROC|#LimitNPROC|g' /lib/systemd/system/openvpn*
 systemctl daemon-reload
fi

sed -i 's|ExecStart=.*|ExecStart=/usr/sbin/openvpn --status %t/openvpn-server/status-%i.log --status-version 2 --suppress-timestamps --config %i.conf|g' /lib/systemd/system/openvpn-server\@.service
systemctl daemon-reload

echo -e "[\e[33mNotice\e[0m] Restarting OpenVPN Service.."
systemctl restart openvpn-server &> /dev/null
systemctl start openvpn-server@server_tcp &>/dev/null
systemctl start openvpn-server@server_udp &>/dev/null
systemctl enable openvpn-server@server_tcp &> /dev/null
systemctl enable openvpn-server@server_udp &> /dev/null

}

function ConfigMenu(){
echo -e "[\e[32mInfo\e[0m] Creating Menu scripts.."

cd /usr/local/sbin/
rm -rf {accounts,base-ports,base-ports-wc,base-script,bench-network,clearcache,connections,create,create_random,create_trial,delete_expired,diagnose,edit_dropbear,edit_openssh,edit_openvpn,edit_ports,edit_squid3,edit_stunnel4,locked_list,menu,options,ram,reboot_sys,reboot_sys_auto,restart_services,server,set_multilogin_autokill,set_multilogin_autokill_lib,show_ports,speedtest,user_delete,user_details,user_details_lib,user_extend,user_list,user_lock,user_unlock}
wget -q 'https://raw.githubusercontent.com/89870must73/REPO/main/menu.zip'
unzip -qq menu.zip
rm -f menu.zip
chmod +x ./*
dos2unix -q ./*
sed -i "s|\(squidport=\).\+|\1\"\$(cat /etc/squid/squid.conf \| grep -i http_port \| awk '{print \$2}' \| cut -d: -f2 \| xargs )\"|" ./*
sed -i "s|/usr/bin|/usr/local/sbin|g" set_multilogin_autokill
sed -i "s|/etc/openvpn/server.conf|/etc/openvpn/server/server_tcp.conf|g" edit_openvpn
sed -i "s|\(Port_Change=\).\+|\1\"s\|port \$Port\|port \$Port_New\|g\";|" edit_openvpn
sed -i "/Port_Change=.*/aPort_Change2=\"s\|remote \$(curl -4s http://ipinfo.io/ip).*\|remote \$(curl -4s http://ipinfo.io/ip) \$Port_New\|g\";" edit_openvpn
sed -i "s|sed -i \$Port_Change|sed -i \"\$Port_Change\"|g" edit_openvpn
sed -i "/sed -i \"\$Port_Change\" \/root\/openvpnport/ased -i \"\$Port_Change2\" \/var\/www\/openvpn\/*.ovpn" edit_openvpn
sed -i "s|service openvpn restart|systemctl restart openvpn-server@server_tcp|g" edit_openvpn
sed -i "s|your OpenVPN Port|your OpenVPN TCP Port|g" edit_openvpn
sed -i "s|\(Port_Change=\).\+|\1\"s\/http_port\s*0.0.0.0:\$Port\/http_port 0.0.0.0:\$Port_New\/g\";|" edit_squid3
sed -i "s|Port_Change /etc/privoxy/config|Port_Change /etc/squid/squid.conf|g" edit_squid3
sed -i "/Port_Change=.*/aPort_Change2=\"s|http-proxy .*\|http-proxy \$(curl -4s http://ipinfo.io/ip) \$Port_New\|g\";" edit_squid3
sed -i "s|sed -i \$Port_Change|sed -i \"\$Port_Change\"|g" edit_squid3
sed -i "/sed -i \"\$Port_Change\" \/etc\/privoxy\/config/ased -i \"\$Port_Change2\" \/var\/www\/openvpn\/\*.ovpn" edit_squid3
sed -i "s|\(Port_Change=\).\+|\1\"s\|Port \$Port\|Port \$Port_New\|g\";|" edit_openssh
sed -i "s|sed -i \$Port_Change|sed -i \"\$Port_Change\"|g" edit_openssh
sed -i "s|egrep \"^\$User\" /etc/passwd|cat \< /etc/passwd \| cut -d: -f1 \| grep -x -E \"^\$\{User\}\"|g" create
cat <<'eofNoload1' > activate_gtm_noload
#!/bin/bash
if [[ ! -e /etc/ohpserver ]]; then
 printf "%s\n" "OHPServer installation not found, omitting activation.." && exit 1
elif [[ ! -e /lib/systemd/system/ohpserver.service ]]; then
 printf "%s\n" "OHPServer daemon not found, omitting activation.." && exit 1
fi
systemctl stop ohpserver.service &>/dev/null
sed -i "/^.*\(D\|d\)ropbear.*$/d" /etc/ohpserver/{run,stop}
echo 'lsof -t -i tcp:81 -s tcp:listen | xargs kill 2>/dev/null ### Dropbear' >> /etc/ohpserver/stop
sed -i "/^.*startup script/a\/etc\/ohpserver\/ohpserver -port 81 -proxy 127.0.0.1:25800 -tunnel 127.0.0.1:550 \&" /etc/ohpserver/run
systemctl start ohpserver.service &>/dev/null
echo -e "GTM Noload SSH Setup now ready to use\nServer running on Port: 80\nRemember: reconnect your VPN every 50-60 seconds"
exit 0
eofNoload1
chmod +x /usr/local/sbin/activate_gtm_noload

cat <<'eofNoload2' > deactivate_gtm_noload
#!/bin/bash
if [[ ! -e /etc/ohpserver ]]; then
 printf "%s\n" "OHPServer installation not found, omitting activation.." && exit 1
elif [[ ! -e /lib/systemd/system/ohpserver.service ]]; then
 printf "%s\n" "OHPServer daemon not found, omitting activation.." && exit 1
fi
systemctl stop ohpserver.service &>/dev/null
sed -i "/^.*\(D\|d\)ropbear.*$/d" /etc/ohpserver/{run,stop}
echo 'lsof -t -i tcp:8085 -s tcp:listen | xargs kill 2>/dev/null ### Dropbear' >> /etc/ohpserver/stop
sed -i "/^.*startup script/a\/etc\/ohpserver\/ohpserver -port 8085 -proxy 127.0.0.1:25800 -tunnel 127.0.0.1:550 \&" /etc/ohpserver/run
systemctl start ohpserver.service &>/dev/null
echo -e "GTM Noload SSH Setup deactivated\nYour Dropbear+OHPServer now back on Port 8085"
exit 0
eofNoload2
chmod +x /usr/local/sbin/deactivate_gtm_noload

cd ~
}

function ConfigSyscript(){
echo -e "[\e[32mInfo\e[0m] Creating Startup scripts.."
if [[ ! -e /etc/bonveio ]]; then
 mkdir -p /etc/bonveio
fi
cat <<'EOFSH' > /etc/bonveio/startup.sh
#!/bin/bash
# BonvScripts
# https://t.me/BonvScripts
# Please star my Repository: https://github.com/Bonveio/BonvScripts
# https://phcorner.net/threads/739298
#
ln -fs /usr/share/zoneinfo/Asia/Manila /etc/localtime
export DEBIAN_FRONTEND=noninteractive
#apt clean
/usr/local/sbin/delete_expired &> /dev/null
EOFSH
chmod +x /etc/bonveio/startup.sh

echo 'clear' > /etc/profile.d/bonv.sh
echo 'echo '' > /var/log/syslog' >> /etc/profile.d/bonv.sh
source /etc/os-release
if [[ "$ID" != 'debian' ]]; then
 echo 'screenfetch -p -A Debian' >> /etc/profile.d/bonv.sh
else
 echo 'screenfetch -p -A Ubuntu' >> /etc/profile.d/bonv.sh
fi
chmod +x /etc/profile.d/bonv.sh

echo "[Unit]
Description=Bonveio Startup Script
Before=network-online.target
Wants=network-online.target

[Service]
Type=oneshot
ExecStart=/bin/bash /etc/bonveio/startup.sh
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target" > /etc/systemd/system/bonveio.service
chmod +x /etc/systemd/system/bonveio.service
systemctl daemon-reload
systemctl start bonveio
systemctl enable bonveio &> /dev/null

#sed -i '/0\s*4\s*.*/d' /etc/crontab
#echo -e "0 4\t* * *\troot\treboot" >> /etc/crontab
systemctl restart cron

}

function ConfigNginxOvpn(){
echo -e "[\e[32mInfo\e[0m] Configuring Nginx configs.."

cat <<'EOFnginx' > /etc/nginx/conf.d/bonveio-ovpn-config.conf
# BonvScripts
# https://t.me/BonvScripts
# Please star my Repository: https://github.com/Bonveio/BonvScripts
# https://phcorner.net/threads/739298
#
server {
 listen 0.0.0.0:86;
 server_name localhost;
 root /var/www/openvpn;
 index index.html;
}
EOFnginx

rm -rf /etc/nginx/sites-*
rm -rf /usr/share/nginx/html
rm -rf /var/www/openvpn
mkdir -p /var/www/openvpn

echo -e "[\e[32mInfo\e[0m] Creating OpenVPN client configs.."

cat <<'mySiteOvpn' > /var/www/openvpn/index.html
<!DOCTYPE html>
<html lang="en">

<!-- Simple OVPN Download site by Bonveio Abitona -->

<head><meta charset="utf-8" /><title>MyScriptName OVPN Config Download</title><meta name="description" content="MyScriptName Server" /><meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport" /><meta name="theme-color" content="#000000" /><link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css"><link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet"><link href="https://cdnjs.cloudflare.com/ajax/libs/mdbootstrap/4.8.3/css/mdb.min.css" rel="stylesheet"></head><body><div class="container justify-content-center" style="margin-top:9em;margin-bottom:5em;"><div class="col-md"><div class="view"><img src="https://openvpn.net/wp-content/uploads/openvpn.jpg" class="card-img-top"><div class="mask rgba-white-slight"></div></div><div class="card"><div class="card-body"><h5 class="card-title">Config List</h5><br /><ul class="list-group">

<li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;"><p>For Globe/TM <span class="badge light-blue darken-4">Android/iOS/PC/Modem</span><br /><small> For EZ/GS Promo with WNP,SNS,FB and IG freebies</small></p><a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/GTMConfig.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a></li>

<li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;"><p>For Sun <span class="badge light-blue darken-4">Android/iOS/PC/Modem</span><br /><small> For TU Promos</small></p><a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/SunConfig.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a></li>

<li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;"><p>For Sun <span class="badge light-blue darken-4">Modem</span><br /><small> Without Promo/Noload</small></p><a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/SunNoloadConfig.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a></li>

<li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;"><p>OHPServer + TCP OVPN <span class="badge light-blue darken-4">Experimental</span><br /><small> Good for Payload Experiments and Bughost hunting(BETA)</small></p><a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/OHPTCPConfig.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a></li><li class="list-group-item justify-content-between align-items-center" style="margin-bottom:1em;"><p> Sample UDP OVPN <span class="badge light-blue darken-4">Experimental</span><br /><small> More faster than TCP. Low latency, fast upload/download speed.</small></p><a class="btn btn-outline-success waves-effect btn-sm" href="http://IP-ADDRESS:NGINXPORT/UDPConfig.ovpn" style="float:right;"><i class="fa fa-download"></i> Download</a></li>

</ul></div></div></div></div></body></html>
mySiteOvpn

sed -i "s|MyScriptName|BonvScripts|g" /var/www/openvpn/index.html
sed -i "s|NGINXPORT|86|g" /var/www/openvpn/index.html
sed -i "s|IP-ADDRESS|$(ip_address)|g" /var/www/openvpn/index.html

######
cat <<"EOFgtm" > /var/www/openvpn/GTMConfig.ovpn
# OpenVPN Server build vOPENVPN_SERVER_VERSION
# Server Location: OPENVPN_SERVER_LOCATION
# Server ISP: OPENVPN_SERVER_ISP
# 

client
dev tun
persist-tun
proto tcp
remote IP-ADDRESS 1194
http-proxy IP-ADDRESS 8000
persist-remote-ip
resolv-retry infinite
connect-retry 0 1
remote-cert-tls server
nobind
reneg-sec 0
keysize 0
rcvbuf 0
sndbuf 0
verb 2
comp-lzo
auth none
auth-nocache
cipher none
setenv CLIENT_CERT 0
http-proxy-option VERSION 1.1
http-proxy-option AGENT Chrome/80.0.3987.87
http-proxy-option CUSTOM-HEADER Host redirect.googlevideo.com
http-proxy-option CUSTOM-HEADER X-Forward-Host redirect.googlevideo.com
http-proxy-option CUSTOM-HEADER X-Forwarded-For redirect.googlevideo.com
http-proxy-option CUSTOM-HEADER Referrer redirect.googlevideo.com
<auth-user-pass>
sam
sam
</auth-user-pass>
EOFgtm

cat <<"EOFsun" > /var/www/openvpn/SunConfig.ovpn
# OpenVPN Server build vOPENVPN_SERVER_VERSION
# Server Location: OPENVPN_SERVER_LOCATION
# Server ISP: OPENVPN_SERVER_ISP
#
# Convert your IP address into hostname (class A record) combined with Viber's URL to make this config work
# example: www.viber.com.edgekey.net.mydns.domain.com

client
dev tun
persist-tun
proto tcp
remote IP-ADDRESS 1194
http-proxy IP-ADDRESS 8000
persist-remote-ip
resolv-retry infinite
connect-retry 0 1
remote-cert-tls server
nobind
reneg-sec 0
keysize 0
rcvbuf 0
sndbuf 0
verb 2
comp-lzo
auth none
auth-nocache
cipher none
setenv CLIENT_CERT 0
http-proxy-option VERSION 1.1
http-proxy-option AGENT Chrome/80.0.3987.87
http-proxy-option CUSTOM-HEADER Host www.viber.com.edgekey.net
http-proxy-option CUSTOM-HEADER X-Forward-Host www.viber.com.edgekey.net
http-proxy-option CUSTOM-HEADER X-Forwarded-For www.viber.com.edgekey.net
http-proxy-option CUSTOM-HEADER Referrer www.viber.com.edgekey.net
<auth-user-pass>
sam
sam
</auth-user-pass>
EOFsun

cat <<"EOFsunnl" > /var/www/openvpn/SunNoloadConfig.ovpn
# OpenVPN Server build vOPENVPN_SERVER_VERSION
# Server Location: OPENVPN_SERVER_LOCATION
# Server ISP: OPENVPN_SERVER_ISP
#
# Outdated config for SUN Noload, For reference and experimental usage only
#
client
dev tun
proto tcp-client
remote IP-ADDRESS 1194
remote-cert-tls server
bind
float
tun-mtu 1500
mute-replay-warnings
connect-retry-max 9999
redirect-gateway def1
connect-retry 0 1
resolv-retry infinite
setenv CLIENT_CERT 0
persist-tun
auth-user-pass
auth none
auth-nocache
auth-retry interact
cipher none
keysize 0
comp-lzo
reneg-sec 0
verb 0
nice -20
log /dev/null
<auth-user-pass>
sam
sam
</auth-user-pass>
EOFsunnl
cat <<"EOFohp1" > /var/www/openvpn/OHPTCPConfig.ovpn
# OpenVPN Server build vOPENVPN_SERVER_VERSION
# Server Location: OPENVPN_SERVER_LOCATION
# Server ISP: OPENVPN_SERVER_ISP
#
# Experimental Config only
# Examples demonstrated below on how to Play with OHPServer
#

client
dev tun
persist-tun
proto tcp

# We can play this one, put any host on the line
# remote anyhost.com anyport
# remote www.google.com.ph 443
#
# We can also play with CRLFs
#remote "HEAD https://ajax.googleapis.com HTTP/1.1/r/n/r/n"
# Every types of Broken remote line setups/crlfs/payload are accepted, just put them inside of double-quotes
remote "https://www.phcorner.net"
## use this line to modify OpenVPN remote port (this will serve as our fake ovpn port)
port 443

# This proxy uses as our main forwarder for OpenVPN tunnel.
http-proxy IP-ADDRESS 8087

# We can also play our request headers here, everything are accepted, put them inside of a double-quotes.
http-proxy-option VERSION 1.1
http-proxy-option CUSTOM-HEADER ""
http-proxy-option CUSTOM-HEADER "Host: www.phcorner.net%2F"
http-proxy-option CUSTOM-HEADER "X-Forwarded-Host: www.digicert.net%2F"
http-proxy-option CUSTOM-HEADER ""

persist-remote-ip
resolv-retry infinite
connect-retry 0 1
remote-cert-tls server
nobind
reneg-sec 0
keysize 0
rcvbuf 0
sndbuf 0
verb 2
comp-lzo
auth none
auth-nocache
cipher none
setenv CLIENT_CERT 0
<auth-user-pass>
sam
sam
</auth-user-pass>
EOFohp1
cat <<"EOFsunudp1" > /var/www/openvpn/UDPConfig.ovpn
# OpenVPN Server build vOPENVPN_SERVER_VERSION
# Server Location: OPENVPN_SERVER_LOCATION
# Server ISP: OPENVPN_SERVER_ISP
#
# Example UDP Client. 
#
client
dev tun
persist-tun
proto udp
remote IP-ADDRESS 25222
persist-remote-ip
resolv-retry infinite
connect-retry 0 1
remote-cert-tls server
nobind
float
fast-io
reneg-sec 0
keysize 0
rcvbuf 0
sndbuf 0
verb 2
comp-lzo
auth none
auth-nocache
cipher none
setenv CLIENT_CERT 0
<auth-user-pass>
sam
sam
</auth-user-pass>
EOFsunudp1

cat <<"EOFgtmec" > /var/www/openvpn/GTMConfig_EC.ovpn
# OpenVPN Server build vOPENVPN_SERVER_VERSION
# Server Location: OPENVPN_SERVER_LOCATION
# Server ISP: OPENVPN_SERVER_ISP
# 

client
dev tun
persist-tun
proto tcp
remote IP-ADDRESS 25980
http-proxy IP-ADDRESS 8000
persist-remote-ip
resolv-retry infinite
connect-retry 0 1
remote-cert-tls server
nobind
reneg-sec 0
keysize 0
rcvbuf 0
sndbuf 0
verb 2
comp-lzo
auth none
auth-nocache
cipher none
setenv CLIENT_CERT 0
tls-client
tls-version-min 1.2
tls-cipher TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256
http-proxy-option VERSION 1.1
http-proxy-option AGENT Chrome/80.0.3987.87
http-proxy-option CUSTOM-HEADER Host redirect.googlevideo.com
http-proxy-option CUSTOM-HEADER X-Forward-Host redirect.googlevideo.com
http-proxy-option CUSTOM-HEADER X-Forwarded-For redirect.googlevideo.com
http-proxy-option CUSTOM-HEADER Referrer redirect.googlevideo.com
<auth-user-pass>
sam
sam
</auth-user-pass>
EOFgtmec

cat <<"EOFsunec" > /var/www/openvpn/SunConfig_EC.ovpn
# OpenVPN Server build vOPENVPN_SERVER_VERSION
# Server Location: OPENVPN_SERVER_LOCATION
# Server ISP: OPENVPN_SERVER_ISP
#
# Convert your IP address into hostname (class A record) combined with Viber's URL to make this config work
# example: www.viber.com.edgekey.net.mydns.domain.com

client
dev tun
persist-tun
proto tcp
remote IP-ADDRESS 25980
http-proxy IP-ADDRESS 8000
persist-remote-ip
resolv-retry infinite
connect-retry 0 1
remote-cert-tls server
nobind
reneg-sec 0
keysize 0
rcvbuf 0
sndbuf 0
verb 2
comp-lzo
auth none
auth-nocache
cipher none
setenv CLIENT_CERT 0
tls-client
tls-version-min 1.2
tls-cipher TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256
http-proxy-option VERSION 1.1
http-proxy-option AGENT Chrome/80.0.3987.87
http-proxy-option CUSTOM-HEADER Host www.viber.com.edgekey.net
http-proxy-option CUSTOM-HEADER X-Forward-Host www.viber.com.edgekey.net
http-proxy-option CUSTOM-HEADER X-Forwarded-For www.viber.com.edgekey.net
http-proxy-option CUSTOM-HEADER Referrer www.viber.com.edgekey.net
<auth-user-pass>
sam
sam
</auth-user-pass>
EOFsunec

cat <<"EOFsunnlec" > /var/www/openvpn/SunNoloadConfig_EC.ovpn
# OpenVPN Server build vOPENVPN_SERVER_VERSION
# Server Location: OPENVPN_SERVER_LOCATION
# Server ISP: OPENVPN_SERVER_ISP
#
# Outdated config for SUN Noload, For reference and experimental usage only
#
client
dev tun
proto tcp-client
remote IP-ADDRESS 25980
remote-cert-tls server
bind
float
tun-mtu 1500
mute-replay-warnings
connect-retry-max 9999
redirect-gateway def1
connect-retry 0 1
resolv-retry infinite
setenv CLIENT_CERT 0
tls-client
tls-version-min 1.2
tls-cipher TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256
persist-tun
auth-user-pass
auth none
auth-nocache
auth-retry interact
cipher none
keysize 0
comp-lzo
reneg-sec 0
verb 0
nice -20
log /dev/null
<auth-user-pass>
sam
sam
</auth-user-pass>
EOFsunnlec

cat <<"EOFohp2" > /var/www/openvpn/OHPTCPConfig_EC.ovpn
# OpenVPN Server build vOPENVPN_SERVER_VERSION
# Server Location: OPENVPN_SERVER_LOCATION
# Server ISP: OPENVPN_SERVER_ISP
#
# Experimental Config only
# Examples demonstrated below on how to Play with OHPServer
#

client
dev tun
persist-tun
proto tcp

# We can play this one, put any host on the line
# remote anyhost.com anyport
# remote www.google.com.ph 443
#
# We can also play with CRLFs
#remote "HEAD https://ajax.googleapis.com HTTP/1.1/r/n/r/n"
# Every types of Broken remote line setups/crlfs/payload are accepted, just put them inside of double-quotes
remote "https://www.phcorner.net"
## use this line to modify OpenVPN remote port (this will serve as our fake ovpn port)
port 443

# This proxy uses as our main forwarder for OpenVPN tunnel.
http-proxy IP-ADDRESS 8088

# We can also play our request headers here, everything are accepted, put them inside of a double-quotes.
http-proxy-option VERSION 1.1
http-proxy-option CUSTOM-HEADER ""
http-proxy-option CUSTOM-HEADER "Host: www.phcorner.net%2F"
http-proxy-option CUSTOM-HEADER "X-Forwarded-Host: www.digicert.net%2F"
http-proxy-option CUSTOM-HEADER ""

persist-remote-ip
resolv-retry infinite
connect-retry 0 1
remote-cert-tls server
nobind
reneg-sec 0
keysize 0
rcvbuf 0
sndbuf 0
verb 2
comp-lzo
auth none
auth-nocache
cipher none
setenv CLIENT_CERT 0
tls-client
tls-version-min 1.2
tls-cipher TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256
<auth-user-pass>
sam
sam
</auth-user-pass>
EOFohp2

cat <<"EOFsunudp2" > /var/www/openvpn/UDPConfig_EC.ovpn
# OpenVPN Server build vOPENVPN_SERVER_VERSION
# Server Location: OPENVPN_SERVER_LOCATION
# Server ISP: OPENVPN_SERVER_ISP
#
# Example UDP Client. 
#
client
dev tun
persist-tun
proto udp
remote IP-ADDRESS 25222
persist-remote-ip
resolv-retry infinite
connect-retry 0 1
remote-cert-tls server
nobind
float
fast-io
reneg-sec 0
keysize 0
rcvbuf 0
sndbuf 0
verb 2
comp-lzo
auth none
auth-nocache
cipher none
setenv CLIENT_CERT 0
tls-client
tls-version-min 1.2
tls-cipher TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256
<auth-user-pass>
sam
sam
</auth-user-pass>
EOFsunudp2


sed -i "s|IP-ADDRESS|$(ip_address)|g" /var/www/openvpn/GTMConfig.ovpn
echo -e "<ca>\n$(cat /etc/openvpn/ca.crt)\n</ca>" >> /var/www/openvpn/GTMConfig.ovpn
echo -e "<cert>\n$(cat /etc/openvpn/server.crt)\n</cert>" >> /var/www/openvpn/GTMConfig.ovpn
echo -e "<key>\n$(cat /etc/openvpn/server.key)\n</key>" >> /var/www/openvpn/GTMConfig.ovpn
echo -e "<tls-auth>\n$(cat /etc/openvpn/ta.key)\n</tls-auth>" >> /var/www/openvpn/GTMConfig.ovpn


sed -i "s|IP-ADDRESS|$(ip_address)|g" /var/www/openvpn/OHPTCPConfig.ovpn
echo -e "<ca>\n$(cat /etc/openvpn/ca.crt)\n</ca>" >> /var/www/openvpn/OHPTCPConfig.ovpn
echo -e "<cert>\n$(cat /etc/openvpn/server.crt)\n</cert>" >> /var/www/openvpn/OHPTCPConfig.ovpn
echo -e "<key>\n$(cat /etc/openvpn/server.key)\n</key>" >> /var/www/openvpn/OHPTCPConfig.ovpn
echo -e "<tls-auth>\n$(cat /etc/openvpn/ta.key)\n</tls-auth>" >> /var/www/openvpn/OHPTCPConfig.ovpn


sed -i "s|IP-ADDRESS|$(ip_address)|g" /var/www/openvpn/UDPConfig.ovpn
echo -e "<ca>\n$(cat /etc/openvpn/ca.crt)\n</ca>" >> /var/www/openvpn/UDPConfig.ovpn
echo -e "<cert>\n$(cat /etc/openvpn/server.crt)\n</cert>" >> /var/www/openvpn/UDPConfig.ovpn
echo -e "<key>\n$(cat /etc/openvpn/server.key)\n</key>" >> /var/www/openvpn/UDPConfig.ovpn
echo -e "<tls-auth>\n$(cat /etc/openvpn/tls-auth.key)\n</tls-auth>" >> /var/www/openvpn/UDPConfig.ovpn


sed -i "s|IP-ADDRESS|$(ip_address)|g" /var/www/openvpn/SunNoloadConfig.ovpn
echo -e "<ca>\n$(cat /etc/openvpn/ca.crt)\n</ca>" >> /var/www/openvpn/SunNoloadConfig.ovpn
echo -e "<cert>\n$(cat /etc/openvpn/server.crt)\n</cert>" >> /var/www/openvpn/SunNoloadConfig.ovpn
echo -e "<key>\n$(cat /etc/openvpn/server.key)\n</key>" >> /var/www/openvpn/SunNoloadConfig.ovpn
echo -e "<tls-auth>\n$(cat /etc/openvpn/ta.key)\n</tls-auth>" >> /var/www/openvpn/GTMConfig.ovpn


sed -i "s|IP-ADDRESS|$(ip_address)|g" /var/www/openvpn/SunConfig.ovpn
echo -e "<ca>\n$(cat /etc/openvpn/ca.crt)\n</ca>" >> /var/www/openvpn/SunConfig.ovpn
echo -e "<cert>\n$(cat /etc/openvpn/server.crt)\n</cert>" >> /var/www/openvpn/SunConfig.ovpn
echo -e "<key>\n$(cat /etc/openvpn/server.key)\n</key>" >> /var/www/openvpn/SunConfig.ovpn


sed -i "s|IP-ADDRESS|$(ip_address)|g" /var/www/openvpn/GTMConfig_EC.ovpn
echo -e "<ca>\n$(cat /etc/openvpn/ec_ca.crt)\n</ca>" >> /var/www/openvpn/GTMConfig_EC.ovpn
echo -e "<cert>\n$(cat /etc/openvpn/server.crt)\n</cert>" >> /var/www/openvpn/GTMConfig_EC.ovpn
echo -e "<key>\n$(cat /etc/openvpn/server.key)\n</key>" >> /var/www/openvpn/GTMConfig_EC.ovpn


sed -i "s|IP-ADDRESS|$(ip_address)|g" /var/www/openvpn/OHPTCPConfig_EC.ovpn
echo -e "<ca>\n$(cat /etc/openvpn/ec_ca.crt)\n</ca>" >> /var/www/openvpn/OHPTCPConfig_EC.ovpn
echo -e "<cert>\n$(cat /etc/openvpn/bonvscripts.crt)\n</cert>" >> /var/www/openvpn/OHPTCPConfig_EC.ovpn
echo -e "<key>\n$(cat /etc/openvpn/bonvscripts.key)\n</key>" >> /var/www/openvpn/OHPTCPConfig_EC.ovpn


sed -i "s|IP-ADDRESS|$(ip_address)|g" /var/www/openvpn/UDPConfig_EC.ovpn
echo -e "<ca>\n$(cat /etc/openvpn/ec_ca.crt)\n</ca>" >> /var/www/openvpn/UDPConfig_EC.ovpn
echo -e "<cert>\n$(cat /etc/openvpn/server.crt)\n</cert>" >> /var/www/openvpn/UDPConfig_EC.ovpn
echo -e "<key>\n$(cat /etc/openvpn/server.key)\n</key>" >> /var/www/openvpn/UDPConfig_EC.ovpn


sed -i "s|IP-ADDRESS|$(ip_address)|g" /var/www/openvpn/SunNoloadConfig_EC.ovpn
echo -e "<ca>\n$(cat /etc/openvpn/ec_ca.crt)\n</ca>" >> /var/www/openvpn/SunNoloadConfig_EC.ovpn
echo -e "<cert>\n$(cat /etc/openvpn/server.crt)\n</cert>" >> /var/www/openvpn/SunNoloadConfig_EC.ovpn
echo -e "<key>\n$(cat /etc/openvpn/server.key)\n</key>" >> /var/www/openvpn/SunNoloadConfig_EC.ovpn


sed -i "s|IP-ADDRESS|$(ip_address)|g" /var/www/openvpn/SunConfig_EC.ovpn
echo -e "<ca>\n$(cat /etc/openvpn/ec_ca.crt)\n</ca>" >> /var/www/openvpn/SunConfig_EC.ovpn
echo -e "<cert>\n$(cat /etc/openvpn/server.crt)\n</cert>" >> /var/www/openvpn/SunConfig_EC.ovpn
echo -e "<key>\n$(cat /etc/openvpn/server.key)\n</key>" >> /var/www/openvpn/SunConfig_EC.ovpn


sed -i "s|OPENVPN_SERVER_VERSION|$(openvpn --version | cut -d" " -f2 | head -n1)|g" /var/www/openvpn/*.ovpn
sed -i "s|OPENVPN_SERVER_LOCATION|$(curl -4s http://ipinfo.io/country), $(curl -4s http://ipinfo.io/region)|g" /var/www/openvpn/*.ovpn
sed -i "s|OPENVPN_SERVER_ISP|$(curl -4s http://ipinfo.io/org | sed -e 's/[^ ]* //')|g" /var/www/openvpn/*.ovpn

cd /var/www/openvpn
zip -r Configs.zip *.ovpn &> /dev/null
cd

echo -e "[\e[33mNotice\e[0m] Restarting Nginx Service.."
systemctl restart nginx
}

function UnistAll(){
 echo -e " Removing dropbear"
 sed -i '/Port 225/d' /etc/ssh/sshd_config
 sed -i '/Banner .*/d' /etc/ssh/sshd_config
 systemctl restart ssh
 systemctl stop dropbear
 apt remove --purge dropbear -y
 rm -f /etc/default/dropbear
 rm -rf /etc/dropbear/*
 echo -e " Removing stunnel"
 systemctl stop stunnel &> /dev/null
 systemctl stop stunnel4 &> /dev/null
 apt remove --purge stunnel -y
 rm -rf /etc/stunnel/*
 rm -rf /etc/default/stunnel*
 echo -e " Removing webmin"
 systemctl stop webmin
 apt remove --purge webmin -y
 rm -rf /etc/webmin/*;
 rm -f /etc/apt/sources.list.d/webmin*;
 echo -e " Removing OpenVPN server and client config download site"
 systemctl stop openvpn-server@server_tcp &>/dev/null
 systemctl stop openvpn-server@server_udp &>/dev/null
 systemctl stop openvpn-server@ec_server_tcp &>/dev/null
 systemctl stop openvpn-server@ec_server_udp &>/dev/null
 systemctl disable openvpn-server@server_tcp &>/dev/null
 systemctl disable openvpn-server@server_udp &>/dev/null
 systemctl disable openvpn-server@ec_server_tcp &>/dev/null
 systemctl disable openvpn-server@ec_server_udp &>/dev/null
 apt remove --purge openvpn -y -f
 rm -rf /etc/openvpn/*
 rm -rf /var/www/openvpn
 rm -f /etc/apt/sources.list.d/openvpn*
 rm -rf /etc/nginx/conf.d/bonveio-ovpn-config*
 systemctl restart nginx &> /dev/null
 echo -e "Removing squid"
 apt remove --purge squid -y
 rm -rf /etc/squid/*
 echo -e "Removing privoxy"
 apt remove --purge privoxy -y
 rm -rf /etc/privoxy/*
 rm -rf /usr/local/{share/man/man7/badvpn*,share/man/man8/badvpn*,bin/badvpn-*}
 echo -e " Finalizing.."
 rm -rf /etc/bonveio
 rm -rf /etc/banner
 systemctl disable bonveio &> /dev/null
 rm -rf /etc/systemd/system/bonveio.service
 rm -rf /etc/cron.d/b_reboot_job
 systemctl restart cron &> /dev/null
 rm -rf /usr/local/sbin/{accounts,base-ports,base-ports-wc,base-script,bench-network,clearcache,connections,create,create_random,create_trial,delete_expired,diagnose,edit_dropbear,edit_openssh,edit_openvpn,edit_ports,edit_squid3,edit_stunnel4,locked_list,menu,options,ram,reboot_sys,reboot_sys_auto,restart_services,server,set_multilogin_autokill,set_multilogin_autokill_lib,show_ports,speedtest,user_delete,user_details,user_details_lib,user_extend,user_list,user_lock,user_unlock,activate_gtm_noload,deactivate_gtm_noload}
 rm -rf /etc/profile.d/bonv.sh
 rm -rf /tmp/*
 apt autoremove -y -f
 rm -rf /etc/ohpserver
 systemctl stop ohpserver.service &> /dev/null
 systemctl disable ohpserver.service &> /dev/null
 echo 3 > /proc/sys/vm/drop_caches
}

function InstallScript(){
if [[ ! -e /dev/net/tun ]]; then
 BONV-MSG
 echo -e "[\e[1;31mÃ—\e[0m] You cant use this script without TUN Module installed/embedded in your machine, file a support ticket to your machine admin about this matter"
 echo -e "[\e[1;31m-\e[0m] Script is now exiting..."
 exit 1
fi

rm -rf /root/.bash_history && echo '' > /var/log/syslog && history -c

## Start Installation
clear
clear
BONV-MSG
echo -e ""
InsEssentials
ConfigOpenSSH
ConfigDropbear
ConfigStunnel
ConfigProxy
ConfigWebmin
service webmin restart
ConfigOpenVPN
ConfigMenu
ConfigSyscript
ConfigNginxOvpn

echo -e "[\e[32mInfo\e[0m] Finalizing installation process.."
ln -fs /usr/share/zoneinfo/Asia/Manila /etc/localtime
sed -i '/\/bin\/false/d' /etc/shells
sed -i '/\/usr\/sbin\/nologin/d' /etc/shells
echo '/bin/false' >> /etc/shells
echo '/usr/sbin/nologin' >> /etc/shells
sleep 1
######

clear
clear
clear
bash /etc/profile.d/bonv.sh
BONV-MSG
echo -e ""
echo -e "\e[38;5;46m=\e[0m\e[38;5;46m=\e[0m\e[38;5;47m S\e[0m\e[38;5;47mu\e[0m\e[38;5;48mc\e[0m\e[38;5;48m\e[0m\e[38;5;49mc\e[0m\e[38;5;49me\e[0m\e[38;5;50ms\e[0m\e[38;5;50ms\e[0m\e[38;5;51m I\e[0m\e[38;5;51mn\e[0m\e[38;5;50ms\e[0m\e[38;5;50mt\e[0m\e[38;5;49ma\e[0m\e[38;5;49ml\e[0m\e[38;5;48ml\e[0m\e[38;5;48ma\e[0m\e[38;5;47mt\e[0m\e[38;5;47mi\e[0m\e[38;5;46mo\e[0m\e[38;5;46mn \e[0m\e[38;5;47m=\e[0m\e[38;5;47m=\e[0m"
echo -e ""
echo -e "\e[92m Service Ports\e[0m\e[97m:\e[0m"
echo -e "\e[92m OpenSSH\e[0m\e[97m: 22, 255\e[0m"
echo -e "\e[92m Stunnel\e[0m\e[97m: $ssldbr, $sslssh\e[0m"
echo -e "\e[92m Dropbear\e[0m\e[97m: $ptdpbr, 143\e[0m"
echo -e "\e[92m Squid\e[0m\e[97m: 8000, $squidopt\e[0m"
echo -e "\e[92m OpenVPN\e[0m\e[97m: 1194(TCP), 25222(UDP)\e[0m"
echo -e "\e[92m OpenVPN EC\e[0m\e[97m: 25980(TCP), 25985(UDP)\e[0m"
echo -e "\e[92m NGiNX\e[0m\e[97m: 86\e[0m"
echo -e "\e[92m Webmin\e[0m\e[97m: 10000\e[0m"
echo -e "\e[92m BadVPN-udpgw\e[0m\e[97m: 7300\e[0m"
echo -e ""
echo -e "\e[97m NEW! OHPServer builds\e[0m"
echo -e "\e[97m (Good for Payload bugging and any related HTTP Experiments)\e[0m"
echo -e "\e[92m OHP+Dropbear\e[0m\e[97m: 8085\e[0m"
echo -e "\e[92m OHP+OpenSSH\e[0m\e[97m: 8086\e[0m"
echo -e "\e[92m OHP+OpenVPN\e[0m\e[97m: 8087\e[0m"
echo -e "\e[92m OHP+OpenVPN Elliptic Curve\e[0m\e[97m: 8088\e[0m"
echo -e ""
echo -e ""
echo -e "\e[92m OpenVPN Configs Download Site\e[0m\e[97m:\e[0m"
echo -e "\e[97m http://$(ip_address):86\e[0m"
echo -e ""
echo -e "\e[92m All OpenVPN Configs Archive\e[0m\e[97m:\e[0m"
echo -e "\e[97m http://$(ip_address)/Configs.zip\e[0m"
echo -e ""
rm -f DebianVPS-Installe*
rm -rf /root/.bash_history && history -c && echo '' > /var/log/syslog
}

#if [[ "$VERSION_ID" -lt 9 ]]; then
# BONV-MSG
# echo -e "[\e[1;31mError\e[0m] This script is supported only on Debian 9 stretch above." 
# exit 1
#fi

if [[ $EUID -ne 0 ]]; then
 BONV-MSG
 echo -e "[\e[1;31mError\e[0m] This script must be run as root, exiting..."
 exit 1
fi

case $1 in
 install)
 BONV-MSG
 InstallScript
 exit 1
 ;;
 uninstall|remove)
 BONV-MSG
 UnistAll
 clear
 BONV-MSG
 echo -e ""
 echo -e " Uninstallation complete."
 rm -f DebianVPS-*
 exit 1
 ;;
 help|--help|-h)
 BONV-MSG
 echo -e " install = Install script"
 echo -e " uninstall = Remove all services installed by this script"
 echo -e " help = show this help message"
 exit 1
 ;;
 *)
 BONV-MSG
 echo -e " Inicio de la instalación"
 echo -e " CRTL + C si desea cancelarlo"
 sleep 3
 InstallScript
 exit 1
 ;;
esac
r builds\e[0m"
echo -e "\e[97m (Good for Payload bugging and any related HTTP Experiments)\e[0m"
echo -e "\e[92m OHP+Dropbear\e[0m\e[97m: 8085\e[0m"
echo -e "\e[92m OHP+OpenSSH\e[0m\e[97m: 8086\e[0m"
echo -e "\e[92m OHP+OpenVPN\e[0m\e[97m: 8087\e[0m"
echo -e "\e[92m OHP+OpenVPN Elliptic Curve\e[0m\e[97m: 8088\e[0m"
echo -e ""
echo -e ""
echo -e "\e[92m OpenVPN Configs Download Site\e[0m\e[97m:\e[0m"
echo -e "\e[97m http://$(ip_address):86\e[0m"
echo -e ""
echo -e "\e[92m All OpenVPN Configs Archive\e[0m\e[97m:\e[0m"
echo -e "\e[97m http://$(ip_address)/Configs.zip\e[0m"
echo -e ""
rm -f DebianVPS-Installe*
rm -rf /root/.bash_history && history -c && echo '' > /var/log/syslog
}

#if [[ "$VERSION_ID" -lt 9 ]]; then
# BONV-MSG
# echo -e "[\e[1;31mError\e[0m] This script is supported only on Debian 9 stretch above." 
# exit 1
#fi

if [[ $EUID -ne 0 ]]; then
 BONV-MSG
 echo -e "[\e[1;31mError\e[0m] This script must be run as root, exiting..."
 exit 1
fi

case $1 in
 install)
 BONV-MSG
 InstallScript
 exit 1
 ;;
 uninstall|remove)
 BONV-MSG
 UnistAll
 clear
 BONV-MSG
 echo -e ""
 echo -e " Uninstallation complete."
 rm -f DebianVPS-*
 exit 1
 ;;
 help|--help|-h)
 BONV-MSG
 echo -e " install = Install script"
 echo -e " uninstall = Remove all services installed by this script"
 echo -e " help = show this help message"
 exit 1
 ;;
 *)
 BONV-MSG
 echo -e " Inicio de la instalación"
 echo -e " CRTL + C si desea cancelarlo"
 sleep 3
 InstallScript
 exit 1
 ;;
esac
